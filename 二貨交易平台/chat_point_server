<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>聊天 & 積分（我的擴充頁）</title>
  <style>
    /* ——— 基本樣式（先簡單就好） ——— */
    :root { --bg:#f7f7fb; --card:#ffffff; --text:#222; --muted:#666; --line:#e7e7ee; }
    * { box-sizing: border-box; }
    body { margin:0; font-family: system-ui, -apple-system, "Microsoft JhengHei", Arial; background:var(--bg); color:var(--text); }
    header { position:sticky; top:0; background:var(--card); border-bottom:1px solid var(--line); padding:12px 16px; }
    main { max-width: 920px; margin: 16px auto; padding: 0 16px 40px; }
    .row { display: grid; grid-template-columns: 1fr; gap: 16px; }
    @media (min-width: 900px) { .row { grid-template-columns: 1fr 1fr; } }
    .card { background:var(--card); border:1px solid var(--line); border-radius:14px; box-shadow: 0 2px 10px rgba(0,0,0,0.03); }
    .card h2 { margin:0; padding:14px 16px; border-bottom:1px solid var(--line); font-size:18px; }
    .card .content { padding:12px 14px; }
    .muted { color:var(--muted); }
    button { cursor:pointer; border:1px solid var(--line); background:#fff; border-radius:10px; padding:8px 12px; }
    button:active { transform: translateY(1px); }
    input, textarea, select { width:100%; border:1px solid var(--line); border-radius:10px; padding:10px; font-size:14px; }
    .row-2 { display:grid; grid-template-columns: 1fr auto; gap: 8px; }
    .msg-list { height: 360px; overflow:auto; display:flex; flex-direction:column; gap:10px; padding:8px; background:#fafafe; border:1px solid var(--line); border-radius:10px; }
    .msg { max-width: 85%; padding:10px 12px; border-radius:12px; line-height:1.4; }
    .msg.me { align-self:flex-end; background:#e8f3ff; border:1px solid #d5e8ff; }
    .msg.other { align-self:flex-start; background:#f0f0f5; border:1px solid #e2e2ea; }
    .meta { font-size:12px; color:#777; margin-top:4px; }
    .pill { display:inline-block; padding:4px 8px; border-radius:999px; font-size:12px; border:1px solid var(--line); background:#fff; }
    .reward { display:flex; align-items:center; justify-content:space-between; border:1px solid var(--line); border-radius:10px; padding:10px 12px; margin-bottom:8px; background:#fcfcff; }
    .toolbar { display:flex; gap:8px; flex-wrap:wrap; }
    .help { font-size:13px; line-height:1.5; }
    .hr { height:1px; background:var(--line); margin:12px 0; }
    .small { font-size:12px; }
    .ok { color:#0a7d20; }
    .err { color:#b00020; }
  </style>
</head>
<body>
  <header>
    <strong>我的擴充頁</strong> — 簡易聊天 & 積分（先用假資料）
  </header>

  <main>
    <!-- 小工具：快速帶入測試參數（之後會改成從你們系統傳進來） -->
    <div class="card">
      <h2>測試參數（先在這裡填，按「套用」）</h2>
      <div class="content">
        <div class="toolbar">
          <label>商品ID（itemId）：<input id="itemId" type="number" value="1"></label>
          <label>使用者A（你自己 userId）：<input id="userA" type="number" value="101"></label>
          <label>使用者B（對方 userId）：<input id="userB" type="number" value="202"></label>
        </div>
        <div class="hr"></div>
        <button id="apply">套用參數</button>
        <span id="applyMsg" class="small muted"></span>
        <p class="help muted">
          之後正式接到他們前端時，這些值會自動帶進來（例如網址參數或程式傳值）。<br>
          現在先手動輸入，方便你測試畫面與流程。
        </p>
      </div>
    </div>

    <div class="row">
      <!-- 左：聊天 -->
      <section class="card">
        <h2>聊天</h2>
        <div class="content">
          <div class="toolbar small muted" id="who"></div>
          <div class="msg-list" id="msgList" aria-live="polite"></div>
          <div class="hr"></div>
          <div class="row-2">
            <input id="msgInput" type="text" placeholder="輸入訊息…" />
            <button id="sendBtn">發送</button>
          </div>
          <div class="small muted" style="margin-top:6px;">提示：現在是「假資料模式」，訊息只存在瀏覽器記憶體。</div>
        </div>
      </section>

      <!-- 右：積分與兌換 -->
      <section class="content">
        <h2>積分與兌換</h2>
        <div class="content">
            <div>目前點數：<span class="pill" id="pointsPill">—</span></div>

            <div class="toolbar" style="margin-top:8px;">
                <button id="tradeBtn">完成交易（+10 點）</button>
        </div>

        <div class="hr"></div>
        <div id="rewards"></div>
        <div class="small muted">提示：現在兌換只會在前端扣分，之後改成呼叫 API。</div>
        </div>


    <section class="card" style="margin-top:16px;">
      <h2>下一步要做什麼？（備忘）</h2>
      <div class="content help">
        <ol>
          <li>把左邊「聊天」的假資料，改成呼叫你的 <code>GET /my-ext/messages</code> 與 <code>POST /my-ext/messages</code>。</li>
          <li>把右邊「積分」改成呼叫 <code>GET /my-ext/points</code>、<code>GET /my-ext/rewards</code>、<code>POST /my-ext/redeem</code>。</li>
          <li>最後再讓他們前端把 <code>itemId / userId</code> 帶進來即可。</li>
        </ol>
      </div>
    </section>
  </main>

  <script>
    /***********************
     *  假資料（先能跑）
     ***********************/
    const TRADE_BONUS = 10; // 完成一筆交易，+10 點

     let state = {
      itemId: 1,
      userA: 101, // 自己
      userB: 202, // 對方
      points: 100, // 自己的點數
      rewards: [
        { id: 1, name: "咖啡折扣券", description: "折抵 50", points: 30 },
        { id: 2, name: "超商購物金", description: "NT$100", points: 80 }
      ],
      // 初始聊天訊息（A/B 各一，一看就懂方向）
      messages: [
        { id: 1, item_id: 1, sender_id: 101, receiver_id: 202, content: "嗨～這個商品還在嗎？", created_at: "2025-09-19 12:00" },
        { id: 2, item_id: 1, sender_id: 202, receiver_id: 101, content: "在的！你什麼時候方便面交？", created_at: "2025-09-19 12:01" }
      ]
    };

    /***********************
     *  DOM 節點
     ***********************/
    const el = {
      itemId: document.getElementById('itemId'),
      userA: document.getElementById('userA'),
      userB: document.getElementById('userB'),
      apply: document.getElementById('apply'),
      applyMsg: document.getElementById('applyMsg'),
      who: document.getElementById('who'),
      msgList: document.getElementById('msgList'),
      msgInput: document.getElementById('msgInput'),
      sendBtn: document.getElementById('sendBtn'),
      pointsPill: document.getElementById('pointsPill'),
      rewards: document.getElementById('rewards'),
      tradeBtn: document.getElementById('tradeBtn')
};


    

    /***********************
     *  小工具
     ***********************/
    function fmtTime(d = new Date()) {
      const pad = n => String(n).padStart(2,'0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
    }
    function scrollToBottom(box) { box.scrollTop = box.scrollHeight; }

    /***********************
     *  Render 區
     ***********************/
    function renderWho() {
      el.who.innerHTML = `當前會話：<strong>itemId=${state.itemId}</strong>；你（userA）是 <strong>${state.userA}</strong>，對方（userB）是 <strong>${state.userB}</strong>`;
    }

    function renderMessages() {
      const list = state.messages
        .filter(m => m.item_id == state.itemId &&
                     ((m.sender_id==state.userA && m.receiver_id==state.userB) ||
                      (m.sender_id==state.userB && m.receiver_id==state.userA)))
        .sort((a,b) => new Date(a.created_at) - new Date(b.created_at));

      el.msgList.innerHTML = '';
      for (const m of list) {
        const div = document.createElement('div');
        div.className = 'msg ' + (m.sender_id==state.userA ? 'me' : 'other');
        div.innerHTML = `
          <div>${escapeHtml(m.content)}</div>
          <div class="meta">${m.sender_id==state.userA?'我':'對方'} · ${m.created_at}</div>
        `;
        el.msgList.appendChild(div);
      }
      scrollToBottom(el.msgList);
    }

    function renderPoints() {
      el.pointsPill.textContent = state.points;
    }

    function renderRewards() {
      el.rewards.innerHTML = '';
      state.rewards.forEach(r => {
        const row = document.createElement('div');
        row.className = 'reward';
        row.innerHTML = `
          <div>
            <div><strong>${escapeHtml(r.name)}</strong> <span class="muted small">（需要 ${r.points} 點）</span></div>
            <div class="small muted">${escapeHtml(r.description)}</div>
          </div>
          <button data-id="${r.id}">兌換</button>
        `;
        row.querySelector('button').onclick = () => redeemFake(r.id);
        el.rewards.appendChild(row);
      });
    }

    function escapeHtml(s) {
      return String(s)
        .replaceAll('&','&amp;')
        .replaceAll('<','&lt;')
        .replaceAll('>','&gt;');
    }

    /***********************
     *  互動（假資料版）
     ***********************/
    // 套用參數
    el.apply.onclick = () => {
      const prev = { ...state };
      state.itemId = Number(el.itemId.value || 1);
      state.userA = Number(el.userA.value || 101);
      state.userB = Number(el.userB.value || 202);
      el.applyMsg.textContent = `已套用（${fmtTime()}）`;
      renderWho();
      renderMessages();
    };

    // 發送訊息（前端暫存）
    el.sendBtn.onclick = () => {
      const text = el.msgInput.value.trim();
      if (!text) return;
      state.messages.push({
        id: Date.now(),
        item_id: state.itemId,
        sender_id: state.userA,
        receiver_id: state.userB,
        content: text,
        created_at: fmtTime()
      });
      el.msgInput.value = '';
      renderMessages();
    };

    // 兌換（前端扣分）
    function redeemFake(rewardId) {
      const r = state.rewards.find(x => x.id===rewardId);
      if (!r) return;
      if (state.points < r.points) {
        alert('點數不足，無法兌換');
        return;
      }
      state.points -= r.points;
      renderPoints();
      alert(`已兌換：${r.name}`);
    }

    /***********************
     *  頁面初始化
     ***********************/
    function init() {
      // （可選）從網址參數帶入初值：/index.html?itemId=1&userA=101&userB=202
      const usp = new URLSearchParams(location.search);
      if (usp.has('itemId')) { state.itemId = Number(usp.get('itemId')); el.itemId.value = state.itemId; }
      if (usp.has('userA')) { state.userA = Number(usp.get('userA')); el.userA.value = state.userA; }
      if (usp.has('userB')) { state.userB = Number(usp.get('userB')); el.userB.value = state.userB; }

      renderWho();
      renderMessages();
      renderPoints();
      renderRewards();
    }
    init();


        // 完成交易（前端加分 + 系統訊息）
    function completeTradeFake() {
    state.points += TRADE_BONUS;
    renderPoints();
    // 加一則系統訊息到當前會話（方便看到紀錄）
    state.messages.push({
        id: Date.now(),
        item_id: state.itemId,
        sender_id: state.userA,           // 這裡用 userA 當觸發者
        receiver_id: state.userB,
        content: `✅ 完成交易：已為使用者 ${state.userA} 增加 ${TRADE_BONUS} 點`,
        created_at: fmtTime()
    });
    renderMessages();
    alert(`完成交易！已為使用者 ${state.userA} 增加 ${TRADE_BONUS} 點`);
    }

    // 綁定按鈕
    el.tradeBtn.onclick = completeTradeFake;


    /***********************
     *  之後要接 API 的地方（先保留註解）
     ***********************/
    /*
    // TODO: 之後把 renderMessages 前，改成真的呼叫你的後端
    async function fetchMessages(itemId, userA, userB) {
      const url = `/my-ext/messages?itemId=${itemId}&userA=${userA}&userB=${userB}&page=1&pageSize=50`;
      const res = await fetch(url);
      return await res.json(); // 應該是一個陣列
    }

    // TODO: 送出訊息時，改呼叫 POST /my-ext/messages
    async function sendMessage(itemId, senderId, receiverId, content) {
      const res = await fetch('/my-ext/messages', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ itemId, senderId, receiverId, content })
      });
      return await res.json(); // 新訊息
    }

    // TODO: 查點數、獎勵、兌換
    async function fetchPoints(userId) { const r = await fetch(`/my-ext/points?userId=${userId}`); return await r.json(); }
    async function fetchRewards() { const r = await fetch(`/my-ext/rewards`); return await r.json(); }
    async function redeem(userId, rewardId) {
      const r = await fetch(`/my-ext/redeem`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ userId, rewardId }) });
      return await r.json();
    }
    */
  </script>
</body>
</html>
