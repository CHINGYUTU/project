require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

// 内存"数据库"
const fakeDB = {
  users: [],
  items: [
    { id: 1, name: '初级称号', price: 50, effect: 'title', value: '萌新' },
    { id: 2, name: '高级称号', price: 100, effect: 'title', value: '大佬' }
  ],
  achievements: [
    { id: 1, name: '首次签到', condition: { type: 'totalPoints', threshold: 10 } }
  ]
};

// 等级配置
const LEVEL_CONFIG = {
  DAILY_BASE_POINTS: 10,
  BONUS_MULTIPLIER: [1.0, 1.2, 1.5, 2.0, 2.5, 3.0],
  UPGRADE_REQUIREMENTS: [0, 5, 15, 30, 50, 100]
};

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

app.use(express.static('public'));

// 核心功能实现
io.on('connection', (socket) => {
  console.log('用户连接:', socket.id);

  // 1. 用户注册
  socket.on('join', (username) => {
    const user = {
      id: Date.now(),
      socketId: socket.id,
      username,
      points: 0,
      level: 1,
      levelBonus: 1.0,
      purchaseCount: 0,
      lastCheckIn: null,
      inventory: []
    };
    fakeDB.users.push(user);
    socket.emit('join-success', { user });
    io.emit('update-users', fakeDB.users);
  });

  // 2. 每日签到
  socket.on('check-in', (userId) => {
    const user = fakeDB.users.find(u => u.id === userId);
    if (!user) return;

    const today = new Date().toDateString();
    if (user.lastCheckIn === today) {
      return socket.emit('check-in-error', '今天已签到过');
    }

    user.points += LEVEL_CONFIG.DAILY_BASE_POINTS * user.levelBonus;
    user.lastCheckIn = today;
    socket.emit('check-in-success', { 
      points: user.points,
      nextLevelReq: LEVEL_CONFIG.UPGRADE_REQUIREMENTS[user.level] - user.purchaseCount
    });
    io.emit('update-users', fakeDB.users);
  });

  // 3. 购买商品
  socket.on('purchase', (userId) => {
    const user = fakeDB.users.find(u => u.id === userId);
    if (!user) return;

    user.purchaseCount++;
    user.points += 5;

    // 升级逻辑
    const nextLevelReq = LEVEL_CONFIG.UPGRADE_REQUIREMENTS[user.level];
    if (user.purchaseCount >= nextLevelReq) {
      user.level++;
      user.levelBonus = LEVEL_CONFIG.BONUS_MULTIPLIER[user.level];
      socket.emit('level-up', { newLevel: user.level });
    }

    socket.emit('purchase-success', { 
      points: user.points,
      purchaseCount: user.purchaseCount
    });
    io.emit('update-users', fakeDB.users);
  });

  // 断开连接
  socket.on('disconnect', () => {
    fakeDB.users = fakeDB.users.filter(u => u.socketId !== socket.id);
    io.emit('update-users', fakeDB.users);
  });
});

// 前端接口
app.get('/api/data', (req, res) => {
  res.json({
    users: fakeDB.users,
    items: fakeDB.items,
    achievements: fakeDB.achievements
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`演示版运行中: http://localhost:${PORT}`);
  console.log('可用路由:');
  console.log(`- http://localhost:${PORT}/api/data (查看内存数据)`);
});
